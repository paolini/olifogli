scalar Timestamp
scalar ObjectId
scalar JSON
scalar Data

type Workbook {
  _id: ObjectId
  name: String
  ownerId: ObjectId
}

type Sheet {
  _id: ObjectId
  name: String
  schema: String
  permissions: [SheetPermission]
  ownerId: ObjectId
  workbookId: ObjectId
}

type SheetPermission {
  userId: ObjectId
  userEmail: String
  filterField: String
  filterValue: String
}

type Row {
  _id: ObjectId
  isValid: Boolean
  updatedOn: Timestamp
  data: Data
}

type User {
  _id: ObjectId
  uid: Int
  email: String
  name: String
  isAdmin: Boolean
}

type Config {
  OLIMANAGER_URL: String
}

type ScanMessage {
  status: String
  message: String
  timestamp: Timestamp
}

type ScanJob {
  _id: ObjectId
  sheetId: ObjectId
  ownerId: ObjectId
  timestamp: Timestamp
  messages: [ScanMessage]
  message: ScanMessage
}

type ScanResults {
  _id: ObjectId
  sheetId: ObjectId
  jobId: ObjectId
  image: String
  rawData: Data
}

type Query {
  hello: String
  me: User
  users: [User]
  config: Config
  workbooks: [Workbook]
  workbook(workbookId: ObjectId!): Workbook
  sheets(workbookId: ObjectId!): [Sheet]
  sheet(sheetId: ObjectId!): Sheet
  rows(sheetId: ObjectId!): [Row]
  scanJobs(sheetId: ObjectId!, userId: ObjectId): [ScanJob]
  scanResults(jobId: ObjectId!): [ScanResults]
  olimanager: String # testing
}

type Mutation {
  addSheet(name: String!, schema: String!, workbookId: ObjectId!): Sheet
  deleteSheet(_id: ObjectId!): ObjectId

  addRow(sheetId: ObjectId!, data: Data!): Row
  patchRow(_id: ObjectId!, updatedOn: Timestamp!, data: Data!): Row
  deleteRow(_id: ObjectId!): ObjectId
  addRows(sheetId: ObjectId!, columns: [String!]!, rows: [[String!]!]!): Int
  
  deleteScan(jobId: ObjectId!): Boolean
}
